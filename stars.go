package slack

// Auto-generated by internal/cmd/genmethods/genmethods.go. DO NOT EDIT!

import (
	"context"
	"net/url"
	"strconv"

	"github.com/lestrrat/go-slack/objects"
	"github.com/pkg/errors"
)

var _ = strconv.Itoa
var _ = objects.EpochTime(0)

// StarsAddCall is created by StarsService.Add method call
type StarsAddCall struct {
	service     *StarsService
	channel     string
	file        string
	fileComment string
	timestamp   string
}

// StarsListCall is created by StarsService.List method call
type StarsListCall struct {
	service *StarsService
	count   int
	page    int
}

// StarsRemoveCall is created by StarsService.Remove method call
type StarsRemoveCall struct {
	service     *StarsService
	channel     string
	file        string
	fileComment string
	timestamp   string
}

// Add creates a StarsAddCall object in preparation for accessing the stars.add endpoint
func (s *StarsService) Add() *StarsAddCall {
	var call StarsAddCall
	call.service = s
	return &call
}

// Channel sets the value for optional channel parameter
func (c *StarsAddCall) Channel(channel string) *StarsAddCall {
	c.channel = channel
	return c
}

// File sets the value for optional file parameter
func (c *StarsAddCall) File(file string) *StarsAddCall {
	c.file = file
	return c
}

// FileComment sets the value for optional fileComment parameter
func (c *StarsAddCall) FileComment(fileComment string) *StarsAddCall {
	c.fileComment = fileComment
	return c
}

// Timestamp sets the value for optional timestamp parameter
func (c *StarsAddCall) Timestamp(timestamp string) *StarsAddCall {
	c.timestamp = timestamp
	return c
}

// Values returns the StarsAddCall object as url.Values
func (c *StarsAddCall) Values() (url.Values, error) {
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if len(c.channel) > 0 {
		v.Set("channel", c.channel)
	}

	if len(c.file) > 0 {
		v.Set("file", c.file)
	}

	if len(c.fileComment) > 0 {
		v.Set("fileComment", c.fileComment)
	}

	if len(c.timestamp) > 0 {
		v.Set("timestamp", c.timestamp)
	}
	return v, nil
}

// Do executes the call to access stars.add endpoint
func (c *StarsAddCall) Do(ctx context.Context) error {
	const endpoint = "stars.add"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		SlackResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to stars.add`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}

// List creates a StarsListCall object in preparation for accessing the stars.list endpoint
func (s *StarsService) List() *StarsListCall {
	var call StarsListCall
	call.service = s
	return &call
}

// Count sets the value for optional count parameter
func (c *StarsListCall) Count(count int) *StarsListCall {
	c.count = count
	return c
}

// Page sets the value for optional page parameter
func (c *StarsListCall) Page(page int) *StarsListCall {
	c.page = page
	return c
}

// Values returns the StarsListCall object as url.Values
func (c *StarsListCall) Values() (url.Values, error) {
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if c.count > 0 {
		v.Set("count", strconv.Itoa(c.count))
	}

	if c.page > 0 {
		v.Set("page", strconv.Itoa(c.page))
	}
	return v, nil
}

// Do executes the call to access stars.list endpoint
func (c *StarsListCall) Do(ctx context.Context) (*StarsListResponse, error) {
	const endpoint = "stars.list"
	v, err := c.Values()
	if err != nil {
		return nil, err
	}
	var res struct {
		SlackResponse
		*StarsListResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return nil, errors.Wrap(err, `failed to post to stars.list`)
	}
	if !res.OK {
		return nil, errors.New(res.Error.String())
	}

	return res.StarsListResponse, nil
}

// Remove creates a StarsRemoveCall object in preparation for accessing the stars.remove endpoint
func (s *StarsService) Remove() *StarsRemoveCall {
	var call StarsRemoveCall
	call.service = s
	return &call
}

// Channel sets the value for optional channel parameter
func (c *StarsRemoveCall) Channel(channel string) *StarsRemoveCall {
	c.channel = channel
	return c
}

// File sets the value for optional file parameter
func (c *StarsRemoveCall) File(file string) *StarsRemoveCall {
	c.file = file
	return c
}

// FileComment sets the value for optional fileComment parameter
func (c *StarsRemoveCall) FileComment(fileComment string) *StarsRemoveCall {
	c.fileComment = fileComment
	return c
}

// Timestamp sets the value for optional timestamp parameter
func (c *StarsRemoveCall) Timestamp(timestamp string) *StarsRemoveCall {
	c.timestamp = timestamp
	return c
}

// Values returns the StarsRemoveCall object as url.Values
func (c *StarsRemoveCall) Values() (url.Values, error) {
	v := url.Values{}
	v.Set(`token`, c.service.token)

	if len(c.channel) > 0 {
		v.Set("channel", c.channel)
	}

	if len(c.file) > 0 {
		v.Set("file", c.file)
	}

	if len(c.fileComment) > 0 {
		v.Set("fileComment", c.fileComment)
	}

	if len(c.timestamp) > 0 {
		v.Set("timestamp", c.timestamp)
	}
	return v, nil
}

// Do executes the call to access stars.remove endpoint
func (c *StarsRemoveCall) Do(ctx context.Context) error {
	const endpoint = "stars.remove"
	v, err := c.Values()
	if err != nil {
		return err
	}
	var res struct {
		SlackResponse
	}
	if err := c.service.client.postForm(ctx, endpoint, v, &res); err != nil {
		return errors.Wrap(err, `failed to post to stars.remove`)
	}
	if !res.OK {
		return errors.New(res.Error.String())
	}

	return nil
}
